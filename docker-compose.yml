version: '3.8'
services:
  postgres:
    container_name: postgres
    image: postgres:12
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=rome
    ports:
      - '5433:5432'
    volumes:
     - ./data/rome_u_journeys.csv:/docker-entrypoint-initdb.d/rome_u_journeys.csv

  scheduler:
    container_name: airflow-scheduler
    image: apache/airflow
    restart: always
    depends_on:
      - postgres
      - webserver
      - kafka
    env_file:
      - ./airflow/.env
    ports:
      - '8793:8793'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
    command: scheduler
    healthcheck:
      test: ['CMD-SHELL', '[ -f /usr/local/airflow/airflow-webserver.pid ]']
      interval: 30s
      timeout: 30s
      retries: 3

  webserver:
    container_name: airflow-webserver
    image: apache/airflow
    hostname: webserver
    restart: always
    depends_on:
      - postgres
      - kafka
    env_file:
      - ./airflow/.env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/scripts:/opt/airflow/scripts
      - ./airflow/logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
    ports:
      - '8080:8080'
    entrypoint: ./scripts/airflow-entrypoint.sh
    command: bash -c "airflow users create --username admin --firstname Jack --lastname Sparrow --role Admin --email example@mail.org --password pass && airflow scheduler"
    healthcheck:
      test: ['CMD-SHELL', '[ -f /usr/local/airflow/airflow-webserver.pid ]']
      interval: 30s
      timeout: 30s
      retries: 32

  grafana:
    container_name: grafana
    image: grafana/grafana:8.3.0
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "password"
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: "smtp.gmail.com:587"
      GF_SMTP_USER: "admin"
      GF_SMTP_PASSWORD: "password"
      GF_SMTP_FROM_ADDRESS: "admin@grafana.localhost"
      GF_SMTP_FROM_NAME: "Grafana"
    depends_on:
      - postgres

  flask:
    container_name: flask
    ports:
      - "5001:5001"
    depends_on:
      - postgres
    build:
      context: ./docker/flask
      dockerfile: Dockerfile
    env_file:
      - ./flask/.env
    volumes:
      - ./flask:/flask

  kafka:
    container_name: kafka
    image: quay.io/strimzi/kafka:latest-kafka-2.8.1-amd64
    command:
      [
        "sh",
        "-c",
        "export CLUSTER_ID=$$(bin/kafka-storage.sh random-uuid) && bin/kafka-storage.sh format -t $$CLUSTER_ID -c config/kraft/server.properties && bin/kafka-server-start.sh config/kraft/server.properties --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS}",
      ]
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092

  patinetes:
    container_name: patinetes-kafka
    depends_on:
      - kafka
    image: python:3.12
    tty: true
    volumes:
      - "./:/usr/src/app"
